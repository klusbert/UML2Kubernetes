[comment encoding = UTF-8 /]
[module generateDeployment('http://www.example.org/kubernetesModel')]

[import kubernetes_model_to_text::requests::generateJavaExtensions/]


[template public generateDeployment(anInfrastructure : Infrastructure) ]
[if (anInfrastructure.deployments->notEmpty())]
	[for (deployment: Deployment | anInfrastructure.deployments)]

		[file (padZeros(deployment.id) +'-deployment-' + deployment.name +'.yml', false, 'UTF-8')]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: [deployment.name.toLowerCase() /]
  namespace: [anInfrastructure.namespace.toLowerCase() /]
spec:
  replicas: [deployment.replicas /]
  selector:
    matchLabels:
      app: [deployment.name.toLowerCase() /]
  template:
    metadata:
      labels:
        app: [deployment.name.toLowerCase() /]
    spec:
[comment volumes/]
	 [if (deployment.volumes->notEmpty())]
      volumes:
		 [for (volume: Volume | deployment.volumes)]
       - name: [volume.name/]
         [volume.type/]:
		 [if (volume.type.toString() = 'configMap')]
           name: [volume.configMapName/]
			[else]
           claimName: [volume.claimName/]
		 [/if]        
		 [/for]
	 [/if]
[comment temp-volume/]
     [if (deployment.memoryMount.size() > 0)]
      volumes:
       - name: temp-volume
         emptyDir: 
           medium: Memory
     [/if]
      containers:
        - name: [deployment.name.toLowerCase() /]
          image: [deployment.image /]
		  [if (deployment.command->notEmpty())]
          command: ['["'/][deployment.command /]['"]'/]
          [/if]
          [if (deployment.args->notEmpty())]
          [for (deployment.args) before ('args: [') separator (',') after (']')]['"'/][self/]['"'/][/for]
		  [/if]
          ports:
            - containerPort: [deployment.port /]
[comment additonalPorts/]
		  [if (deployment.additionalPorts->notEmpty())]
		  [for (port: Port | deployment.additionalPorts)]
            - containerPort: [port.number/]
              name: [port.name/]
		  [/for]
          [/if]  
[comment EnviromentVars/]
	 [if (deployment.enviromentVariables->notEmpty() or deployment.configMapDependencies->notEmpty() )]
          env:
          [for (envar: EnviromentVariables | deployment.enviromentVariables)]
            - name: [envar.name /]
              value: [formatVariables(envar.value,anInfrastructure.namespace) /]
		  [/for]
	 [/if]
[comment ConfigMapDependency/]
	 [if (deployment.configMapDependencies->notEmpty())]
    	[for (confDep: ConfigMapDependency | deployment.configMapDependencies)]
			[for (dep : Dependency | confDep.dependency)]			
            - name: [dep.envName /]
              valueFrom:
			  [if (confDep.isSecret)]
                secretKeyRef:
				[else]	
                configMapKeyRef:
			  [/if]           
                  name: [confDep.configMapName/]
                  key: [dep.keyName/]
			[/for]
		  [/for]
	 [/if]
[comment SecurityContext/]
	 [if (deployment.securityContext->notEmpty())]
          securityContext:
            runAsNonRoot: [deployment.securityContext.runAsRoot /]
			[if (deployment.securityContext.runAsUser > -1)]
            runAsUser: [deployment.securityContext.runAsUser /]
			[/if]
            [if (deployment.securityContext.runAsGroup > -1)]
			runAsGroup: [deployment.securityContext.runAsGroup /]
			[/if]
			[if (deployment.securityContext.fsGroup > -1)]
			fsGroup: [deployment.securityContext.fsGroup/]
			[/if]            
            [if (deployment.securityContext.capabilities.add->notEmpty() or deployment.securityContext.capabilities.drop->notEmpty())]
            capabilities:
              [if (deployment.securityContext.capabilities.drop->notEmpty())]
              drop:
                [for (var: String | deployment.securityContext.capabilities.drop)]
                - [var /]             
			    [/for]
              [/if]
              [if (deployment.securityContext.capabilities.add->notEmpty())]
              add:
                 [for (var: String | deployment.securityContext.capabilities.add)]
                - [var /]             
			    [/for]
              [/if]
			[/if]
            readOnlyRootFilesystem: [deployment.securityContext.readOnlyRootFilesystem /]
	 [/if]
	 [if (deployment.resourceAllocation->notEmpty())]
          resources:
            limits:
              cpu: [deployment.resourceAllocation.cpuLimit /]
              memory: [deployment.resourceAllocation.memoryLimit /]
            requests:
              cpu: [deployment.resourceAllocation.cpuRequest /]
              memory: [deployment.resourceAllocation.memoryRequest /]
	 [/if]
[comment Memory mount/]
		  [if (deployment.memoryMount.size() > 0)]
          volumeMounts:
            - mountPath: [deployment.memoryMount/]
              name: temp-volume				  			
          [/if]
[comment persistentVolume claim/]
	 [if (deployment.volumeMounts->notEmpty())]
          volumeMounts:
          [for (vm: VolumeMount | deployment.volumeMounts)]
            - name: [vm.name/]
              mountPath: [vm.mountPath/]
		  [/for]
	 [/if]
	[if (deployment.service->notEmpty())]	
[if (deployment.service.publicAccess)]
---
kind: Service
apiVersion: v1
metadata:
  name: [deployment.service.name.toLowerCase() /]
  namespace: [anInfrastructure.namespace.toLowerCase() /]
spec:
  selector:
    app: [deployment.name.toLowerCase() /]
  type: [deployment.service.accessibilityType /]
  ports:  
    - port: [deployment.service.port /]
      protocol: [deployment.service.protocol.toString() /]     
      targetPort: [deployment.port /]
[else]
---
apiVersion: v1
kind: Service
metadata:
  name: [deployment.service.name.toLowerCase()/]
  namespace: [anInfrastructure.namespace.toLowerCase() /]
spec:  
  ports:
    - port: [deployment.service.port /]        
      protocol: [deployment.service.protocol.toString() /]
      targetPort: [deployment.port /]
  selector:
    app: [deployment.name.toLowerCase() /]
[/if]
[/if]
[if (deployment.ingress->notEmpty())]
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: [deployment.name.toLowerCase() +'-ingress'/]
  namespace: [anInfrastructure.namespace.toLowerCase() /]
spec:
  rules:
  - http:
      paths:
      - path: [deployment.ingress.path /]
        backend:
          service:
            name: [deployment.name.toLowerCase() /]
            port:
              number: [deployment.service.port /]
        pathType: Exact
			[/if]	
		[/file]
	[/for]
[/if]
[/template]
