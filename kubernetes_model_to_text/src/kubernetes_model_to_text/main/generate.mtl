[comment encoding = UTF-8 /]
[module generate('http://www.example.org/kubernetesModel')]


[template public generateElement(anInfrastructure : Infrastructure)]
[comment @main/]
[file (anInfrastructure.name + '.yml', false, 'UTF-8')]
---
kind: Namespace
apiVersion: v1
metadata:
  name: [anInfrastructure.namespace.toLowerCase() /]
  labels:
    name: [anInfrastructure.namespace.toLowerCase() /]

[if (anInfrastructure.deployments->notEmpty())]
	[for (deployment: Deployment | anInfrastructure.deployments)]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: [deployment.name.toLowerCase() /]
  namespace: [anInfrastructure.namespace /]
spec:
  replicas: [deployment.replicas /]
  selector:
    matchLabels:
      app: [deployment.name.toLowerCase() /]
  template:
    metadata:
      labels:
        app: [deployment.name.toLowerCase() /]
    spec:
	 [if (deployment.dataPersistent->notEmpty())]
      volumes:
       - name: [deployment.name.toLowerCase() +'-persistent-storage'/]
         persistentVolumeClaim:
           claimName: [deployment.name.toLowerCase() +'-pvc'/]
	 [/if]
      containers:
        - name: [deployment.name.toLowerCase() /]
          image: [deployment.image /]
          ports:
            - containerPort: [deployment.port /]
	 [if (deployment.enviromentVariables->notEmpty())]
          env:
          [for (envar: EnviromentVariables | deployment.enviromentVariables)]
            - name: [envar.name /]
              value: [envar.value /]
		  [/for]
	 [/if]
	 [if (deployment.dataPersistent->notEmpty())]        
          volumeMounts:
            - name: [deployment.name.toLowerCase() +'-persistent-storage'/]
              mountPath: [deployment.dataPersistent.mountPath /]
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: [deployment.name.toLowerCase() +'-pvc'/]
  namespace: [anInfrastructure.namespace /]
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: [deployment.dataPersistent.sizeInGB  +'Gi'/]
	 [/if]
	[if (deployment.service->notEmpty())]	
[for (svc: Service | deployment.service)]

[if (svc.publicAccess)]
---
kind: Service
apiVersion: v1
metadata:
  name: [deployment.name.toLowerCase() /]
  namespace: [anInfrastructure.namespace /]
spec:
  selector:
    app: [deployment.name.toLowerCase() /]
  type: LoadBalancer
  ports:
    - name: http
      port: [svc.port /]
      targetPort: [deployment.port /]
[else]
---
apiVersion: v1
kind: Service
metadata:
  name: [deployment.name.toLowerCase() /]
  namespace: [anInfrastructure.namespace /]
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: [svc.port /]
      targetPort: [deployment.port /]
  selector:
    app: [deployment.name.toLowerCase() /]
[/if]

[/for]
    [/if]
	[/for]
[/if]	


[/file]
[/template]
