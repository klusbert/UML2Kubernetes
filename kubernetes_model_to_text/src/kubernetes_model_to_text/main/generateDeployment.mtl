[comment encoding = UTF-8 /]
[module generateDeployment('http://www.example.org/kubernetesModel')]


[template public generateDeployment(anInfrastructure : Infrastructure) ]
[if (anInfrastructure.deployments->notEmpty())]
	[for (deployment: Deployment | anInfrastructure.deployments)]
	Current index: [i/]
	
	//invoke java padding funciton
		if(i < 10) append "0"

[file (i.toString() +'-deployment-' +deployment.name +'.asd', false, 'UTF-8')]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: [deployment.name.toLowerCase() /]
  namespace: [anInfrastructure.namespace.toLowerCase() /]
spec:
  replicas: [deployment.replicas /]
  selector:
    matchLabels:
      app: [deployment.name.toLowerCase() /]
  template:
    metadata:
      labels:
        app: [deployment.name.toLowerCase() /]
    spec:
	 [if (deployment.dataPersistent->notEmpty())]
      volumes:
       - name: [deployment.name.toLowerCase() +'-persistent-storage'/]
         persistentVolumeClaim:
           claimName: [deployment.name.toLowerCase() +'-pvc'/]
	 [/if]
[comment temp-volume/]
     [if (deployment.memoryMount->notEmpty())]
      volumes:
       - name: temp-volume
         emptyDir: 
           medium: Memory
     [/if]
      containers:
        - name: [deployment.name.toLowerCase() /]
          image: [deployment.image /]
		  [if (deployment.command->notEmpty())]
          command: ['["'/][deployment.command /]['"]'/]
          [/if]
          [if (deployment.args->notEmpty())]
          [for (deployment.args) before ('args: [') separator (',') after (']')]['"'/][self/]['"'/][/for]
		  [/if]
          ports:
            - containerPort: [deployment.port /]
[comment additonalPorts/]
		  [if (deployment.additionalPorts->notEmpty())]
		  [for (port: Port | deployment.additionalPorts)]
            - containerPort: [port.number/]
              name: [port.name/]
		  [/for]
          [/if]  
[comment EnviromentVars/]
	 [if (deployment.enviromentVariables->notEmpty())]
          env:
          [for (envar: EnviromentVariables | deployment.enviromentVariables)]
            - name: [envar.name /]
              value: [envar.value /]
		  [/for]
	 [/if]
[comment SecurityContext/]
	 [if (deployment.securityContext->notEmpty())]
          securityContext:
            runAsNonRoot: [deployment.securityContext.runAsRoot /]
			[if (deployment.securityContext.runAsUser > -1)]
            runAsUser: [deployment.securityContext.runAsUser /]
			[/if]
            [if (deployment.securityContext.runAsGroup > -1)]
			runAsGroup: [deployment.securityContext.runAsGroup /]
			[/if]
			[if (deployment.securityContext.fsGroup > -1)]
			fsGroup: [deployment.securityContext.fsGroup/]
			[/if]            
            [if (deployment.securityContext.capabilities.add->notEmpty() or deployment.securityContext.capabilities.drop->notEmpty())]
            capabilities:
              [if (deployment.securityContext.capabilities.drop->notEmpty())]
              drop:
                [for (var: String | deployment.securityContext.capabilities.drop)]
                - [var /]             
			    [/for]
              [/if]
              [if (deployment.securityContext.capabilities.add->notEmpty())]
              add:
                 [for (var: String | deployment.securityContext.capabilities.add)]
                - [var /]             
			    [/for]
              [/if]
			[/if]
            readOnlyRootFilesystem: [deployment.securityContext.readOnlyRootFilesystem /]
	 [/if]
	 [if (deployment.resourceAllocation->notEmpty())]
          resources:
            limits:
              cpu: [deployment.resourceAllocation.cpuLimit /]
              memory: [deployment.resourceAllocation.memoryLimit /]
            requests:
              cpu: [deployment.resourceAllocation.cpuRequest /]
              memory: [deployment.resourceAllocation.memoryRequest /]
	 [/if]
[comment Memory mount/]
		  [if (deployment.memoryMount->notEmpty())]
          volumeMounts:
            - mountPath: [deployment.memoryMount/]
              name: temp-volume					
          [/if]
	[/file]
	[/for]
[/if]
[/template]
