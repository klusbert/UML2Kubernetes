import PrimativeDataTypesHelper;
import StereoTypeHelper;
import DeploymentTransformation;
import ConfigMapTransformation;
 

modeltype UML uses 'http://www.eclipse.org/uml2/5.0.0/UML';
modeltype KuberntesMetaModel uses 'http://www.example.org/kubernetesModel';
modeltype kuberProfile uses 'http://kubernetesProfile';



///https://sdqweb.ipd.kit.edu/wiki/QVT#Global_variables


transformation umlDD2cloudInfrastructure(in input : UML, out output : KuberntesMetaModel);

main() {

log("Begin transformation");
//Get name of diagram

(input.rootObjects())[UML::Model]->asOrderedSet()->first().map deployment2infra();

input.artifacts() -> map artifactToConfigMap();

input.nodes() -> map nodesToDeployment();

input.dependensies() -> map dependencyToConfigMapDependency();

input.dependensies() -> map dependencyToService();



}


mapping UML::Dependency::dependencyToConfigMapDependency() : KuberntesMetaModel::ConfigMapDependency
	when{
		self.getConfigMapDependency() <> null or self.getSecretDependency() <> null;
	}{
	var configMapDependency := self.getConfigMapDependency();
	var secretDependency := self.getSecretDependency();
	var vars = self.getValue(configMapDependency,"dependencies");
	var isSecret := false;
	

		//overide
	if(secretDependency <> null){
		vars :=self.getValue(secretDependency,"dependencies");
		isSecret := true;
	};
	
	var source := self.source->asSequence()->first().oclAsType(UML::Node);
	var target := self.target->asSequence()->first().oclAsType(UML::Artifact);	
	
	var sourceDeployment := source.resolveoneIn(UML::Node::nodesToDeployment);
	var targetConfigMap := target.resolveoneIn(UML::Artifact::artifactToConfigMap);
	
	

	vars->flatten()->asSequence()->forEach(variable){	
	 //log("found environment variable ToString is:" + variable.toString() + " and repr is: " + variable.repr());
	    var name := variable.oclAsType(kuberProfile::DataTypes::PullEnviromentVariables).name;
	    var key := variable.oclAsType(kuberProfile::DataTypes::PullEnviromentVariables).keyName;
	    //log("found environment variable: name-value are:" + name.toString()+"-"+value.toString());
	    
	    var configDependency := new KuberntesMetaModel::Dependency();
	
		configDependency.envName := name;
	    configDependency.keyName := key;  	
	 	
	 	result.dependency += configDependency;
	 	
	  
		      
	};	
	
	result.isSecret := isSecret;
	result.configMapName := targetConfigMap.name;
	sourceDeployment.configMapDependencies += result;

	
}
mapping UML::Artifact::artifactToConfigMap() : KuberntesMetaModel::ConfigMap 
	when {
		//safeguard
		self.getConfigMap() <> null or self.getSecret() <> null or self.getMysqlDump() <> null;
	}{
	
	var configMap := self.getConfigMap();
	var secret := self.getSecret();
	var mysqlDump := self.getMysqlDump();
	var containerInfra := resolveoneIn(UML::NamedElement::deployment2infra);
	
	if(configMap <> null){
		self.artifactToConfigMap(result,configMap);
	};
	if( secret <> null){
		self.artifactToConfigMap(result,secret);
		result.isSecret := true;
	};
	if( mysqlDump<> null){
		self.artifactToMySqlDump(result, mysqlDump);
		result.isDump := true; // dumps are ussally long pipe the text
	};
	

	containerInfra.objectsCount := containerInfra.objectsCount +1;
	result.id := containerInfra.objectsCount;	
	

	containerInfra.configMaps += result;

}	
/*

*/
mapping UML::Dependency::dependencyToService() : KuberntesMetaModel::Service 
when {
	
	self.getAccessibility() <> null;
	
}{
	var containerInfra := resolveoneIn(UML::NamedElement::deployment2infra);
	var accessibilityStereoType = self.getAccessibility();
	var protocol := self.getValue(accessibilityStereoType, "protocol").oclAsType(EnumerationLiteral).specification.oclAsType(LiteralInteger).value;
	var ingress := self.getValue(accessibilityStereoType,"ingress").oclAsType(kuberProfile::DataTypes::Ingress);
	var target := self.target->asSequence()->first().oclAsType(UML::Node);
	var source := self.source->asSequence()->first().oclAsType(UML::Node);
	var isSourceNode := self.source->asSequence()->first().oclIsTypeOf(UML::Node);
	var isTargetNode := self.target->asSequence()->first().oclIsTypeOf(UML::Node);
	switch{
		case(protocol = 0){
			result.protocol := KuberntesMetaModel::Protocol::TCP;
		}
		case (protocol = 1){
			result.protocol := KuberntesMetaModel::Protocol::UDP;
		}
		case (protocol = 2){
			result.protocol := KuberntesMetaModel::Protocol::HTTP;
		}
	};
	
	if( isSourceNode and isTargetNode){
		var port := self.getValue(accessibilityStereoType,"accessPort").oclAsType(Integer);
		
		var targetDeployment := target.resolveoneIn(UML::Node::nodesToDeployment);
	
		var p := source.isOutsider();
		result.port := targetDeployment.port; // exposes same port as the container.
		result.deploymentPort := targetDeployment.port; 
		result.deploymentName := targetDeployment.name;
		result.publicAccess := false;
	
		result.name := targetDeployment.name;
		result.accessibilityType := AccessibilityType::ClusterIP;
		if(source.isOutsider()){
		//	result.publicAccess := true;
			
			result.port := port;
			result.accessibilityType :=containerInfra.accessibilityType;
			if(ingress <> null){
				var i := new Ingress();
				i.path := ingress.path;
				i.host := ingress.host;
				i.className := ingress.className;
			 	result.accessibilityType := AccessibilityType::ClusterIP;
				result.ingress := i;
				
			};
		
		};
		
	
	
	
		containerInfra.objectsCount := containerInfra.objectsCount +1;
		result.id := containerInfra.objectsCount;
		containerInfra.service += result;
		   // create a service for the mathcing deployment here..
	};
	
	
}

mapping UML::Dependency::dependencyToService1() : KuberntesMetaModel::Service 
	when {
		//safeguard
		self.getAccessibility() <> null;
	}{
	var containerInfra := resolveoneIn(UML::NamedElement::deployment2infra);
	var accessibilityStereoType = self.getAccessibility();
	


	var protocol := self.getValue(accessibilityStereoType, "protocol").oclAsType(EnumerationLiteral).specification.oclAsType(LiteralInteger).value;
	var ingress := self.getValue(accessibilityStereoType,"ingress").oclAsType(kuberProfile::DataTypes::Ingress);
	var target := self.target->asSequence()->first().oclAsType(UML::Node);
	var source := self.source->asSequence()->first().oclAsType(UML::Node);
	var isSourceNode := self.source->asSequence()->first().oclIsTypeOf(UML::Node);
	var isTargetNode := self.target->asSequence()->first().oclIsTypeOf(UML::Node);
		// check if both source and target is of type node

	switch{
		case(protocol = 0){
			result.protocol := KuberntesMetaModel::Protocol::TCP;
		}
		case (protocol = 1){
			result.protocol := KuberntesMetaModel::Protocol::UDP;
		}
		case (protocol = 2){
			result.protocol := KuberntesMetaModel::Protocol::HTTP;
		}
	};
	if( isSourceNode and isTargetNode){
		 
		
		var port := self.getValue(accessibilityStereoType,"accessPort").oclAsType(Integer);
		
		var targetDeployment := target.resolveoneIn(UML::Node::nodesToDeployment);
	
		var p := source.isOutsider();
		result.port := targetDeployment.port; // exposes same port as the container.
		result.deploymentPort := targetDeployment.port; 
		result.deploymentName := targetDeployment.name;
		result.publicAccess := false;
	
		result.name := targetDeployment.name;
		result.accessibilityType := AccessibilityType::ClusterIP;
		if(source.isOutsider()){
		//	result.publicAccess := true;
			
			//result.port := port;
			result.accessibilityType :=containerInfra.accessibilityType;
		
		};
	
	
	
		containerInfra.objectsCount := containerInfra.objectsCount +1;
		result.id := containerInfra.objectsCount;
		containerInfra.service += result;
		   // create a service for the mathcing deployment here..
		   
	};
		
	
	
}

helper UML::Node::isOutsider() : Boolean {
	///if not resolved then it is an outsider.	
   // var outSider :=resolveIn(UML::Node::nodesToDeployment)->select(d | d.identifier = self.qualifiedName)->first().oclIsTypeOf(KuberntesMetaModel::Deployment) != true;
	
	var outSider := self.resolveIn(UML::Node::nodesToDeployment)->size() = 0;
	return outSider;
}
mapping UML::NamedElement::deployment2infra() : KuberntesMetaModel::Infrastructure 
	when {
		// should only allow one executionEnviroment..
		self->ownedElement->flatten()[UML::ExecutionEnvironment]->size() =1;
	}{	
	name := self.name;
	var executionEnv := self->ownedElement->flatten()->asSequence()[UML::ExecutionEnvironment]->first();
	var clusterInformation := executionEnv.getClusterInformation();

	var enums := executionEnv.getValue(clusterInformation, "accessibilityType").oclAsType(EnumerationLiteral).specification.oclAsType(LiteralInteger).value;
	apiVersion :=executionEnv.getValue(clusterInformation, "apiVersion").oclAsType(Integer);
	namespace := executionEnv.getValue(clusterInformation, "namespace").oclAsType(String);

	if(enums = 0){
		accessibilityType := KuberntesMetaModel::AccessibilityType::NodePort;
	};
	if(enums = 1){
		accessibilityType := KuberntesMetaModel::AccessibilityType::LoadBalancer;
	};
		
}


mapping UML::Node::nodesToDeployment() : KuberntesMetaModel::Deployment 
	when {
		// a guard to only map nodes that has the stereotype of the Deployment type.
		self.getDeployment() <> null or self.getMysqlStereoType() <> null or self.getMongoStereoType() <> null ;
	}{
	var containerInfra := resolveoneIn(UML::NamedElement::deployment2infra);
	var deploymentStereotype := self.getDeployment();
	var mysqlStereotype := self.getMysqlStereoType();
	var mongoStereotype := self.getMongoStereoType();

	
	result.namespace := containerInfra.namespace;
	if(deploymentStereotype <> null ){		
		self.deploymentToDeployment(result, deploymentStereotype,containerInfra);
	};
	if(mysqlStereotype <> null){
		self.mysqlToDeployment(result, mysqlStereotype,containerInfra);		
	};
	if(mongoStereotype<> null){
		self.mongoToDeployment(result, mongoStereotype,containerInfra);
	};
	
	
	containerInfra.objectsCount := containerInfra.objectsCount +1;
	result.id := containerInfra.objectsCount;
	containerInfra.deployments += result;
	
}










helper UML::excutionEnviroment() : Set(UML::ExecutionEnvironment){
	var enviroments := self.objectsOfType(UML::ExecutionEnvironment)->asOrderedSet();
	// This execution path is useful when running the transformation at development time
	return enviroments;
}


helper UML::dependensies() : Set(UML::Dependency){
	return self.objectsOfType(UML::Dependency);
}

helper UML::nodes() : Set(UML::Node) {
	if (self.rootObjects()[UML::Node]->isEmpty().not()) {
		log("Nodes found: " + self.rootObjects()[UML::Node]->asOrderedSet()->first().name);
		return self.rootObjects()[UML::Node]->asOrderedSet();
	};
	var nodes := self.objectsOfType(UML::Node)->asOrderedSet();
	// This execution path is useful when running the transformation at development time
	return nodes;
}

helper UML::artifacts() : Set(UML::Artifact){
	return self.objectsOfType(UML::Artifact);
}



