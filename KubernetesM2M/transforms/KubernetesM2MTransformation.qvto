import PrimativeDataTypesHelper;
import StereoTypeHelper;
import DeploymentTransformation;

modeltype UML uses 'http://www.eclipse.org/uml2/5.0.0/UML';
modeltype KuberntesMetaModel uses 'http://www.example.org/kubernetesModel';
modeltype kuberProfile uses 'http://kubernetesProfile';



///https://sdqweb.ipd.kit.edu/wiki/QVT#Global_variables


transformation umlDD2cloudInfrastructure(in input : UML, out output : KuberntesMetaModel);

main() {

//Get name of diagram

(input.rootObjects())[UML::Model]->asOrderedSet()->first().map deployment2infra();

input.nodes() -> map nodesToDeployment();
input.dependensies() -> map dependencyToService();
}


mapping UML::Dependency::dependencyToService() : KuberntesMetaModel::Service 
	when {
		//safeguard
		self.getAccessibility() <> null;
	}{
	var containerInfra := resolveoneIn(UML::NamedElement::deployment2infra);
	var accessibilityStereoType = self.getAccessibility();

	var target := self.target->asSequence()->first().oclAsType(UML::Node);
	var source := self.source->asSequence()->first().oclAsType(UML::Node);
	var isSourceNode := self.source->asSequence()->first().oclIsTypeOf(UML::Node);
	var isTargetNode := self.target->asSequence()->first().oclIsTypeOf(UML::Node);
		// check if both source and target is of type node
		
	if( isSourceNode and isTargetNode){
		 
		
		var port := self.getValue(accessibilityStereoType,"accessPort").oclAsType(Integer);
		
		var targetDeployment := target.resolveoneIn(UML::Node::nodesToDeployment);
	
		var p := source.isOutsider();
		result.port := targetDeployment.port;
		result.publicAccess := false;

		if(source.isOutsider()){
			result.publicAccess := true;
			result.port := port;
		};
		targetDeployment.service := result;
		   // create a service for the mathcing deployment here..
		   
	};
		
	
	
}

helper UML::Node::isOutsider() : Boolean {
	///if not resolved then it is an outsider.	
   // var outSider :=resolveIn(UML::Node::nodesToDeployment)->select(d | d.identifier = self.qualifiedName)->first().oclIsTypeOf(KuberntesMetaModel::Deployment) != true;
	
	var outSider := self.resolveIn(UML::Node::nodesToDeployment)->size() = 0;
	return outSider;
}
mapping UML::NamedElement::deployment2infra() : KuberntesMetaModel::Infrastructure 
	when {
		// should only allow one executionEnviroment..
		self->ownedElement->flatten()[UML::ExecutionEnvironment]->size() =1;
	}{	
	name := self.name;
	var executionEnv := self->ownedElement->flatten()->asSequence()[UML::ExecutionEnvironment]->first();
	var clusterInformation := executionEnv.getClusterInformation();

	var enums := executionEnv.getValue(clusterInformation, "accessibilityType").oclAsType(EnumerationLiteral).specification.oclAsType(LiteralInteger).value;
	apiVersion :=executionEnv.getValue(clusterInformation, "apiVersion").oclAsType(Integer);
	namespace := executionEnv.getValue(clusterInformation, "namespace").oclAsType(String);

	if(enums = 0){
		accessibilityType := KuberntesMetaModel::AccessibilityType::NodePort;
	};
	if(enums = 1){
		accessibilityType := KuberntesMetaModel::AccessibilityType::LoadBalancer;
	};
		
}


mapping UML::Node::nodesToDeployment() : KuberntesMetaModel::Deployment 
	when {
		// a guard to only map nodes that has the stereotype of the Deployment type.
		self.getDeployment() <> null or self.getMysqlStereoType() <> null or self.getMongoStereoType() <> null;
	}{
	var containerInfra := resolveoneIn(UML::NamedElement::deployment2infra);
	var deploymentStereotype := self.getDeployment();
	var mysqlStereotype := self.getMysqlStereoType();
	var mongoStereotype := self.getMongoStereoType();
	
	result.namespace := containerInfra.namespace;
	if(deploymentStereotype <> null){
		
		self.deploymentToDeployment(result, deploymentStereotype,containerInfra.namespace);
	};
	if(mysqlStereotype <> null){
		self.mysqlToDeployment(result, mysqlStereotype);		
	};
	if(mongoStereotype<> null){
		self.mongoToDeployment(result, mongoStereotype);
	};
	result.name := self.name;
	
	containerInfra.deployments += result;
	
}










helper UML::excutionEnviroment() : Set(UML::ExecutionEnvironment){
	var enviroments := self.objectsOfType(UML::ExecutionEnvironment)->asOrderedSet();
	// This execution path is useful when running the transformation at development time
	return enviroments;
}


helper UML::dependensies() : Set(UML::Dependency){
	return self.objectsOfType(UML::Dependency);
}

helper UML::nodes() : Set(UML::Node) {
	if (self.rootObjects()[UML::Node]->isEmpty().not()) {
		log("Nodes found: " + self.rootObjects()[UML::Node]->asOrderedSet()->first().name);
		return self.rootObjects()[UML::Node]->asOrderedSet();
	};
	var nodes := self.objectsOfType(UML::Node)->asOrderedSet();
	// This execution path is useful when running the transformation at development time
	return nodes;
}








