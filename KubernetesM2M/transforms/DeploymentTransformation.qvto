import PrimativeDataTypesHelper;

library DeploymentTransformation;

modeltype UML uses 'http://www.eclipse.org/uml2/5.0.0/UML';
modeltype KuberntesMetaModel uses 'http://www.example.org/kubernetesModel';
modeltype kuberProfile uses 'http://kubernetesProfile';

/**
* Return a deployment that has standard attributes for mysql.
**/

helper UML::Node::mysqlToDeployment(inout deployment : KuberntesMetaModel::Deployment, in mysqlStereoType :UML::Stereotype )  {
		deployment.port := 3306;
		deployment.replicas := 1;	
		deployment.image := "mysql:"+self.getString(mysqlStereoType,"version");
		var pvc := new PersistentData();
		pvc.mountPath := "/var/lib/mysql";
		pvc.sizeInGB := self.getInteger(mysqlStereoType,"storageSizeInGB");		
		deployment.dataPersistent := pvc;
		
		var databaseNameEnv := new EnviromentVariables();
		var rootPassword := new EnviromentVariables();
		
		databaseNameEnv.name :="MYSQL_DATABASE";
		databaseNameEnv.value := self.getString(mysqlStereoType, "databaseName");		
		
		rootPassword.name :="MYSQL_ROOT_PASSWORD";
		rootPassword.value := self.getString(mysqlStereoType, "rootPassword");		
		
		
		deployment.enviromentVariables += databaseNameEnv;
		deployment.enviromentVariables += rootPassword;
		
}

helper UML::Node::deploymentToDeployment(inout deployment: KuberntesMetaModel::Deployment, in deploymentStereoType : UML::Stereotype){
	    deployment.image := self.getString(deploymentStereoType,"image");
	    deployment.port := self.getInteger(deploymentStereoType,"port");
	    deployment.replicas := self.getInteger(deploymentStereoType,"replicas");
	    
	    deployment.dataPersistent := self.getDataPersistent(deploymentStereoType);
	    deployment.enviromentVariables += self.getEnviromentVariables(deploymentStereoType);
}

helper UML::Node::getEnviromentVariables(in deploymentStereoType : UML::Stereotype) : OrderedSet(EnviromentVariables){

	var environmentVariables :=	self.getValue(deploymentStereoType,"environmentVariables"); //.oclAsType(KuberProfile2::EnviromentVariables);
	var nodeEnviromentVars: Set(EnviromentVariables);
	
	
	environmentVariables->flatten()->asSequence()->forEach(variable){		
	    var name := variable.oclAsType(kuberProfile::EnviromentVariables).name;
	    var value := variable.oclAsType(kuberProfile::EnviromentVariables).value;
	    var newEnv = new EnviromentVariables();	
	    
	    if(value.startsWith("dns")){	    
	    	var dnsURI := value.replaceAll("dns:","");	   	
	   		//uri format serviceName.namespace.svc.cluster.local
	   		var nameSpace := self.getString(deploymentStereoType,"namespace");
	    
	    	value := dnsURI + "." + nameSpace.toLower() +".svc.cluster.local";
	    };
		newEnv.name := name;
	    newEnv.value := value;
				
		nodeEnviromentVars +=newEnv;              
	};	
	return nodeEnviromentVars->asOrderedSet();
}


helper UML::Node::getDataPersistent(in deploymentStereoType : UML::Stereotype) : PersistentData {
	
	var dataPersistent :=	self.getValue(deploymentStereoType,"dataPersistent");
	if(dataPersistent <> null){
		var size := dataPersistent.oclAsType(kuberProfile::PersistentData).sizeInGB;
		var mountPath := dataPersistent.oclAsType(kuberProfile::PersistentData).mountPath;
		var pd := new PersistentData();
		pd.mountPath := mountPath;
		pd.sizeInGB := size;
		return pd;
	
	};	
	return null;
}

