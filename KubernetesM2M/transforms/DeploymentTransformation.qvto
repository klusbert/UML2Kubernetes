import PrimativeDataTypesHelper;

library DeploymentTransformation;

modeltype UML uses 'http://www.eclipse.org/uml2/5.0.0/UML';
modeltype KuberntesMetaModel uses 'http://www.example.org/kubernetesModel';
modeltype kuberProfile uses 'http://kubernetesProfile';

/**
* Return a deployment that has standard attributes for mysql.
**/

helper UML::Node::mysqlToDeployment(inout deployment : KuberntesMetaModel::Deployment, in mysqlStereoType :UML::Stereotype )  {
		deployment.port := 3306;
		deployment.replicas := 1;	
		deployment.image := "mysql:"+self.getString(mysqlStereoType,"version");
		var pvc := new PersistentData();
		pvc.mountPath := "/var/lib/mysql";
		pvc.sizeInGB := self.getInteger(mysqlStereoType,"storageSizeInGB");		
		deployment.dataPersistent := pvc;
		
		var databaseNameEnv := new EnviromentVariables();
		var rootPassword := new EnviromentVariables();
		
		databaseNameEnv.name :="MYSQL_DATABASE";
		databaseNameEnv.value := self.getString(mysqlStereoType, "databaseName");		
		
		rootPassword.name :="MYSQL_ROOT_PASSWORD";
		rootPassword.value := self.getString(mysqlStereoType, "rootPassword");		
		
		
		deployment.enviromentVariables += databaseNameEnv;
		deployment.enviromentVariables += rootPassword;
		
}
helper UML::Node::mongoToDeployment(inout deployment : KuberntesMetaModel::Deployment, in mongoStereotype :UML::Stereotype )  {
	deployment.port := 27017;
	deployment.replicas := 1;
	deployment.image := "mongo";
	var pvc := new PersistentData();
	pvc.mountPath := "/data/db";
	pvc.sizeInGB := self.getInteger(mongoStereotype,"storageSizeInGB");		
	deployment.dataPersistent := pvc;
	
	var rootUser := new EnviromentVariables();
	rootUser.name :="MONGO_INITDB_ROOT_USERNAME";
	rootUser.value := "root";	
	
	
	var rootPassword := new EnviromentVariables();
	rootPassword.name :="MONGO_INITDB_ROOT_PASSWORD";
	rootPassword.value := self.getString(mongoStereotype, "rootPassword");		
	
	deployment.enviromentVariables += rootUser;
	deployment.enviromentVariables += rootPassword;
}


helper UML::Node::deploymentToDeployment(inout deployment: KuberntesMetaModel::Deployment, in deploymentStereoType : UML::Stereotype, in namespace : String){
	    deployment.image := self.getString(deploymentStereoType,"image");
	    deployment.port := self.getInteger(deploymentStereoType,"port");
	    deployment.replicas := self.getInteger(deploymentStereoType,"replicas");
	    
	    deployment.dataPersistent := self.getDataPersistent(deploymentStereoType);
	    deployment.enviromentVariables += self.getEnviromentVariables(deploymentStereoType, namespace);
}

helper UML::Node::getEnviromentVariables(in deploymentStereoType : UML::Stereotype, in namespace :String) : OrderedSet(EnviromentVariables){

	var environmentVariables :=	self.getValue(deploymentStereoType,"environmentVariables"); //.oclAsType(KuberProfile2::EnviromentVariables);
	var nodeEnviromentVars: Set(EnviromentVariables);
	
	
	environmentVariables->flatten()->asSequence()->forEach(variable){	
	 log("found environment variable ToString is:" + variable.toString() + " and repr is: " + variable.repr());
	    var name := variable.oclAsType(kuberProfile::DataTypes::EnviromentVariables).name;
	    var value := variable.oclAsType(kuberProfile::DataTypes::EnviromentVariables).value;
	    log("found environment variable: name-value are:" + name.toString()+"-"+value.toString());
	    var newEnv = new EnviromentVariables();	
	  
	    if(value.indexOf("$dns") > 0){	    
	
	       value := value.replace("$dns",namespace.toLower() +".svc.cluster.local");	    
		   log(value);
	    };
	
		newEnv.name := name;
	    newEnv.value := value;
				
		nodeEnviromentVars +=newEnv;              
	};	
	return nodeEnviromentVars->asOrderedSet();
}


helper UML::Node::getDataPersistent(in deploymentStereoType : UML::Stereotype) : PersistentData {
	
	var dataPersistent :=	self.getValue(deploymentStereoType,"dataPersistent");
	if(dataPersistent <> null){
		var size := dataPersistent.oclAsType(kuberProfile::DataTypes::PersistentData).sizeInGB;
		var mountPath := dataPersistent.oclAsType(kuberProfile::DataTypes::PersistentData).mountPath;
		var pd := new PersistentData();
		pd.mountPath := mountPath;
		pd.sizeInGB := size;
		return pd;
	
	};	
	return null;
}

